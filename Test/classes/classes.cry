def main()
  # Primitives as objects
  func(150)
  print_color("Primitive Objects:", 11)
  8.type().print_color(12)
  "".print()
  11.50.print()
  
  print_color("Class Manipulation:", 11)
  "".print()
  
  # Built in File object.
  f = File
  f.print()
  
  # Box constructor.
  Box(10, 30).print()
  Box(100, 20).area().print()
  
  # Making an object.
  x = Cube
  print(x)
  print("")
  
  print(File)

  # Testing object types
  print_color("Type of object: " + type(x), 11)
  print(x == Cube)
  print(x == fork(x))
  print(x == [nil, nil])

  # Setting Attributes of an object.
  y = 10
  x.@2d = Box(y, y * 2)
  x.@depth = y + 11.1

  z = 10
  y = fork(x)
  y.@2d.@width = 100 
  y.@2d.@height = 1.35 
  y.@depth = "depth"

  print_color("\nContents of object x:", 11)

  print(x)
  print(x.@2d.@width)
  print(x.@2d.@height)
  print(x.@depth)

  print_color("\nContents of clone " + type(y) + " y:", 11)

  print(y)
  print(y.@2d.@width)
  print(y.@2d.@height)
  print(y.@depth)
  
  print_color("\nCalling area function for x:", 11)
  print(x.area())
  
  print_color("\nCalling area function for x.@2d:", 11)
  print(ret = x.@2d.area())
  x.info(ret)
  
  return ret
end

class Cube
  # Pull out attributes for easy documentation
  @2d
  @depth
  
  def init()
    @2d = Box(0, 0)
    @depth = 0
  end

  def info(val)
    print("type of " + val + " is " + type(val))
  end
  
  # Get the area of the cube
  def area()
	info(val = @2d.area() * @depth)
	return val
  end
end

def func()
  print("Hello")
end

class Box
  # Pull out attributes for easy documentation
  @width
  @height
  
  def init(width, height)
	@width = width
	@height = height
  end
  
  def info()
	print(type(this))
  end

  # Get the area of the box
  def area()
	return @width * @height
  end
end