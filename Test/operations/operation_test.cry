#Simple crystal code for testing

def main()  
  print_color("Boolean operations", 14)
  booleans()
  print("")
  
  print_color("Standard operations", 14)
  print_color("Additive Operations:", 11)
  x = 2
  x += 2.5 + x
  print(x)
  #x = 8
  x = 2
  x += x += x
  print(x)

  print_color("Subtractive Operations:", 11)
  y = 32
  y -= 10.5
  print("y: " + y)
  x = 10
  y = 7
  print(x - 7)
  print(7 - x)
  print(10 - (x - y))
  print(10 - (y - x))

  print_color("Multiplicative Operations:", 11)
  y = 10
  y *= 10
  print(y)
  y *= 22
  print(y + " = " + 2200)
  
  print_color("Division Operations:", 11)
  y = 110
  y /= 11
  print(y)
  #integer division
  num = 80
  den = 7
  print(num / den)
  #standard division
  num = 80.0
  den = 7
  print(num / den)
  
  print_color("Exponent Operations:", 11)
  y = 2
  y ^= 10
  print(y)
  y = 2
  print(y ^ 10.5)

  print_color("Nil Assignments:", 11)
  z += 1
  print(z)
  z = 5
  z -= nil
  print(z)

  print_color("Equivalent Operations:", 11)
  print(2 != 4)
  print("Hello" != "Hello")
  flag = ("Hello" != "World") == false
  print(flag)
  print(PI != PI)
  flag = false
  print((true != flag) == false)
  flag = 1.5
  print("World" == flag)
  flag2 = 1.5
  print(obscure_val != 2.4)
  print_color("Less Operations:", 10)
  print(2 < 4)
  x = 7.5
  y = 6.0
  print(x <= y)
  print_color("Greater Operations:", 10)
  print(2 > 4)
  print(2 + 6 > 4)
  print(x >= y)
  print_color("Variable Equivalent:", 10)
  val = 1
  val2 = 1
  print(val + " != " + val2 + ": " + (val != val2))
  val2 += 1
  print(val + " != " + val2 + ": " + (val != val2))
  val2 -= 1
  print(val + " == " + val2 + ": " + (val == val2) + "\n")
  
  print_color("Swap Operations:", 14)
  x = "New " + "string"
  y = 10.546
  print("x: " + x)
  print("y: " + y + "\n")
  x <> y
  print("x: " + x)
  print("y: " + y + "\n")
  
  k = input
  print_color("The type of input was a " + type(k), 12)
  
  return "Done"
end
def obscure_val()
  return 2.5
end
def obscure_nil()
  return nil
end